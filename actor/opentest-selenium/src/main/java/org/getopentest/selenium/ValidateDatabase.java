package org.getopentest.selenium;

import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

public class ValidateDatabase extends SeleniumTestAction {
	@Override
	public void run() {
		super.run();
		this.writeOutput("jsonResult", this.executeQuery());
	}

	@SuppressWarnings("unchecked")
	private JSONArray executeQuery() {
		String query = this.readStringArgument("query", "");
		String dbDriver = this.readStringArgument("dbDriver", "");
		String connectionString = this.readStringArgument("connectionString", "");
		String dbUserName = this.readStringArgument("dbUserName", "");
		String dbPassword = this.readStringArgument("dbPassword", "");
		JSONArray json = new JSONArray();	
		try (java.sql.Connection con = DriverManager.getConnection(connectionString, dbUserName, dbPassword)) {
			Class.forName(dbDriver).newInstance();
			log.info("Connected to MySQL");
			Statement stmt = (Statement) con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,
					ResultSet.CONCUR_READ_ONLY);
			ResultSet rs = stmt.executeQuery(query);
			ResultSetMetaData metaData = rs.getMetaData();
			int numberOfColumns = metaData.getColumnCount();
			while (rs.next()) {				
				JSONObject obj = new JSONObject();
				for (int i = 1; i <= numberOfColumns; i++) {
					String columnName = metaData.getColumnName(i);
					columnName = null == columnName ? columnName = "" : columnName;
					obj.put(columnName, rs.getObject(columnName));
				}
				json.add(obj);
			}

		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return json;
	}
}
